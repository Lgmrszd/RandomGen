#!/usr/bin/env python3
# -*- coding: utf-8 -*-


import sys
from PyQt4 import QtCore, QtGui, QtWidgets
from math import ceil
from random import randint
import randomcalc

histwidth=600
histheight=300


def calculate(n,a,b,c,x0):
    numb=[x0]
    for i in range(n):
        numb.append((a*numb[i]+b)%c)
    return numb

class Ui_Form(QtWidgets.QMainWindow):

    def __init__(self):
        super().__init__()
        self.initUI()

    def readSimpleVar(self):
        return int(self.a_lineedit.text()), int(self.b_lineedit.text()), int(self.c_lineedit.text()), int(self.x0_lineedit.text())

    def readHarderVar(self):
        return int(self.a_lineedit.text()), int(self.b_lineedit.text()), int(self.c_lineedit.text()), int(self.d_lineedit.text()), int(self.x0_lineedit.text()), int(self.x1_lineedit.text())

    def drawRectangle(self,x,y,w,h):
        color=QtGui.qRgb(randint(0,255),randint(0,255),randint(0,255))
        for a in range(x,x+w+1):
            for b in range(y,y+h):
                self.image.setPixel(a,histheight-b-1,color)

    def drawHistogram(self,data):
        num_of_rectangles=len(data)
        field_size=10
        width=(histwidth-2*field_size)/num_of_rectangles
        for i in range(num_of_rectangles):
            self.drawRectangle(ceil(field_size+i*width),0,ceil(field_size+(i+1)*width)-ceil(field_size+i*width)-1,data[i])

    def btnClick(self):
        self.drawHistogram([randint(1,300) for i in range(20)])

    def initUI(self):
        self.image=QtGui.QImage(histwidth,histheight,4)
        self.image.fill(QtGui.qRgb(255,255,255))

        self.drawRectangle(0,1,3,0)
        self.drawHistogram([randint(1,300) for i in range(400)])

        self.pixmap=QtGui.QPixmap(histwidth,histheight)
        self.pixmap.convertFromImage(self.image)

        self.histogram_label=QtWidgets.QLabel(self)
        self.histogram_label.move(0,0)
        self.histogram_label.setFixedSize(histwidth,histheight)
        self.histogram_label.setPixmap(self.pixmap)

        line_valid=QtGui.QIntValidator(-999,999)

        self.a_label=QtWidgets.QLabel('A:')
        self.a_lineedit=QtWidgets.QLineEdit()
        self.a_lineedit.setFixedWidth(50)
        self.a_lineedit.setValidator(line_valid)

        self.b_label=QtWidgets.QLabel('B:')
        self.b_lineedit=QtWidgets.QLineEdit()
        self.b_lineedit.setFixedWidth(50)
        self.b_lineedit.setValidator(line_valid)

        self.c_label=QtWidgets.QLabel('C:')
        self.c_lineedit=QtWidgets.QLineEdit()
        self.c_lineedit.setFixedWidth(50)
        self.c_lineedit.setValidator(line_valid)

        self.x0_label=QtWidgets.QLabel('X0:')
        self.x0_lineedit=QtWidgets.QLineEdit()
        self.x0_lineedit.setFixedWidth(50)
        self.x0_lineedit.setValidator(line_valid)

        self.x1_label=QtWidgets.QLabel('X1:')
        self.x1_lineedit=QtWidgets.QLineEdit()
        self.x1_lineedit.setFixedWidth(50)
        self.x1_lineedit.setValidator(line_valid)

        self.d_label=QtWidgets.QLabel('D:')
        self.d_lineedit=QtWidgets.QLineEdit()
        self.d_lineedit.setFixedWidth(50)
        self.d_lineedit.setValidator(line_valid)

        self.calculate_btn=QtWidgets.QPushButton('Рассчитать')
        self.calculate_btn.setSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)

        self.a_VBox=QtWidgets.QVBoxLayout()
        self.a_VBox.addWidget(self.a_label)
        self.a_VBox.addWidget(self.a_lineedit)

        self.b_VBox=QtWidgets.QVBoxLayout()
        self.b_VBox.addWidget(self.b_label)
        self.b_VBox.addWidget(self.b_lineedit)

        self.c_VBox=QtWidgets.QVBoxLayout()
        self.c_VBox.addWidget(self.c_label)
        self.c_VBox.addWidget(self.c_lineedit)

        self.x0_VBox=QtWidgets.QVBoxLayout()
        self.x0_VBox.addWidget(self.x0_label)
        self.x0_VBox.addWidget(self.x0_lineedit)

        self.simple_prefHBox=QtWidgets.QHBoxLayout()
        self.simple_prefHBox.addLayout(self.a_VBox)
        self.simple_prefHBox.addLayout(self.b_VBox)
        self.simple_prefHBox.addLayout(self.c_VBox)
        self.simple_prefHBox.addLayout(self.x0_VBox)

        self.simple_GroupBox=QtWidgets.QGroupBox('Основные параметры')
        self.simple_GroupBox.setLayout(self.simple_prefHBox)

        self.x1_VBox=QtWidgets.QVBoxLayout()
        self.x1_VBox.addWidget(self.x1_label)
        self.x1_VBox.addWidget(self.x1_lineedit)

        self.d_VBox=QtWidgets.QVBoxLayout()
        self.d_VBox.addWidget(self.d_label)
        self.d_VBox.addWidget(self.d_lineedit)

        self.hard_prefHBox=QtWidgets.QHBoxLayout()
        self.hard_prefHBox.addLayout(self.x1_VBox)
        self.hard_prefHBox.addLayout(self.d_VBox)

        self.hard_GroupBox=QtWidgets.QGroupBox('Сложный генератор')
        self.hard_GroupBox.setLayout(self.hard_prefHBox)
        self.hard_GroupBox.setFixedWidth(180)
        self.hard_GroupBox.setCheckable(True)
        self.hard_GroupBox.setChecked(False)

        self.result_label=QtWidgets.QLabel('Ничего')

        self.prefHBox=QtWidgets.QHBoxLayout()
        self.prefHBox.addWidget(self.simple_GroupBox)
        self.prefHBox.addWidget(self.hard_GroupBox)
        self.prefHBox.addWidget(self.calculate_btn)

        self.resultHBox=QtWidgets.QHBoxLayout()
        self.resultHBox.addWidget(self.result_label)

        self.mainVBox = QtWidgets.QVBoxLayout()
        self.mainVBox.addLayout(self.prefHBox)
        self.mainVBox.addLayout(self.resultHBox)
        self.mainVBox.addWidget(self.histogram_label)
        self.mainVBox.addStretch(1)

        # centralwidet
        self.uiwidget = QtWidgets.QWidget()
        self.uiwidget.setLayout(self.mainVBox)

        self.setCentralWidget(self.uiwidget)
        self.setGeometry(0, 0, 500, 300)
        self.setWindowTitle('aaaa')

app = QtWidgets.QApplication(sys.argv)
Form = Ui_Form()
Form.show()
sys.exit(app.exec_())
